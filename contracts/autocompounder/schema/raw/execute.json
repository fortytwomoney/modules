{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "update_fee_config"
      ],
      "properties": {
        "update_fee_config": {
          "type": "object",
          "properties": {
            "deposit": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "performance": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "withdrawal": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Join vault by depositing one or more funds",
      "type": "object",
      "required": [
        "deposit"
      ],
      "properties": {
        "deposit": {
          "type": "object",
          "required": [
            "funds"
          ],
          "properties": {
            "funds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AnsAsset"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw all unbonded funds",
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Compound all rewards in the vault",
      "type": "object",
      "required": [
        "compound"
      ],
      "properties": {
        "compound": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Unbond in batches",
      "type": "object",
      "required": [
        "batch_unbond"
      ],
      "properties": {
        "batch_unbond": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AnsAsset": {
      "type": "object",
      "required": [
        "amount",
        "name"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "name": {
          "$ref": "#/definitions/AssetEntry"
        }
      }
    },
    "AssetEntry": {
      "description": "May key to retrieve information on an asset",
      "type": "string"
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
