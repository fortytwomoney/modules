{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "type": "object",
  "required": [
    "liquidity_token",
    "max_swap_spread",
    "pool_address",
    "pool_assets",
    "pool_data",
    "staking_target",
    "vault_token"
  ],
  "properties": {
    "liquidity_token": {
      "description": "Address of the LP token contract",
      "allOf": [
        {
          "$ref": "#/definitions/AssetInfoBase_for_Addr"
        }
      ]
    },
    "max_swap_spread": {
      "description": "maximum compound spread",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "min_unbonding_cooldown": {
      "description": "minimum unbonding cooldown",
      "anyOf": [
        {
          "$ref": "#/definitions/Duration"
        },
        {
          "type": "null"
        }
      ]
    },
    "pool_address": {
      "description": "Pool address (number or Address)",
      "allOf": [
        {
          "$ref": "#/definitions/PoolAddressBase_for_Addr"
        }
      ]
    },
    "pool_assets": {
      "description": "Resolved pool assets",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AssetInfoBase_for_Addr"
      }
    },
    "pool_data": {
      "description": "Pool metadata",
      "allOf": [
        {
          "$ref": "#/definitions/PoolMetadata"
        }
      ]
    },
    "staking_target": {
      "description": "Address of the staking contract",
      "allOf": [
        {
          "$ref": "#/definitions/StakingTarget"
        }
      ]
    },
    "unbonding_period": {
      "description": "Pool bonding period",
      "anyOf": [
        {
          "$ref": "#/definitions/Duration"
        },
        {
          "type": "null"
        }
      ]
    },
    "vault_token": {
      "description": "Vault token",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "AssetInfoBase_for_Addr": {
      "description": "Represents the type of an fungible asset.\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Duration": {
      "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "height"
          ],
          "properties": {
            "height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Time in seconds",
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PoolAddressBase_for_Addr": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "separate_addresses"
          ],
          "properties": {
            "separate_addresses": {
              "type": "object",
              "required": [
                "liquidity",
                "swap"
              ],
              "properties": {
                "liquidity": {
                  "$ref": "#/definitions/Addr"
                },
                "swap": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "contract"
          ],
          "properties": {
            "contract": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PoolMetadata": {
      "type": "object",
      "required": [
        "assets",
        "dex",
        "pool_type"
      ],
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetEntry"
          }
        },
        "dex": {
          "type": "string"
        },
        "pool_type": {
          "$ref": "#/definitions/PoolType"
        }
      }
    },
    "PoolType": {
      "type": "string",
      "enum": [
        "ConstantProduct",
        "Stable",
        "Weighted",
        "LiquidityBootstrap"
      ]
    },
    "StakingTarget": {
      "description": "Possible staking targets to support staking on cosmwasm contract or cosmos Lockup module",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "contract"
          ],
          "properties": {
            "contract": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
