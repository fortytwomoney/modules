{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "description": "Query the config of the autocompounder Returns [`Config`]",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Query the fee config of the autocompounder Returns [`FeeConfig`]",
      "type": "object",
      "required": [
        "fee_config"
      ],
      "properties": {
        "fee_config": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Query the amount of pending claims Returns [`Uint128`]",
      "type": "object",
      "required": [
        "pending_claims"
      ],
      "properties": {
        "pending_claims": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Query all pending claims Returns [`Vec<Claim>`]",
      "type": "object",
      "required": [
        "all_pending_claims"
      ],
      "properties": {
        "all_pending_claims": {
          "type": "object",
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint8",
              "minimum": 0.0
            },
            "start_after": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Query the amount of claims Returns [`Vec<Claim>`]",
      "type": "object",
      "required": [
        "claims"
      ],
      "properties": {
        "claims": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Query all claim accounts Returns [`Vec<(Sting, Vec<Claim>)>`]",
      "type": "object",
      "required": [
        "all_claims"
      ],
      "properties": {
        "all_claims": {
          "type": "object",
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint8",
              "minimum": 0.0
            },
            "start_after": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Query the latest unbonding Returns [`Expiration`]",
      "type": "object",
      "required": [
        "latest_unbonding"
      ],
      "properties": {
        "latest_unbonding": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Query the vaults total lp position Returns [`Uint128`]",
      "type": "object",
      "required": [
        "total_lp_position"
      ],
      "properties": {
        "total_lp_position": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Query the vault token supply Returns [`Uint128`]",
      "type": "object",
      "required": [
        "total_supply"
      ],
      "properties": {
        "total_supply": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Query the number of assets per share(s) in the vault Returns ['Uint128']",
      "type": "object",
      "required": [
        "assets_per_shares"
      ],
      "properties": {
        "assets_per_shares": {
          "type": "object",
          "properties": {
            "shares": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Query the balance of vault tokens of a given address Returns [`Uint128`]",
      "type": "object",
      "required": [
        "balance"
      ],
      "properties": {
        "balance": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
