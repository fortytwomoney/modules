{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "Wrapper around all possible messages that can be sent to the module.",
  "oneOf": [
    {
      "description": "A configuration message, defined by the base.",
      "type": "object",
      "required": [
        "base"
      ],
      "properties": {
        "base": {
          "$ref": "#/definitions/BaseExecuteMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "An app request defined by a base consumer.",
      "type": "object",
      "required": [
        "module"
      ],
      "properties": {
        "module": {
          "$ref": "#/definitions/AutocompounderExecuteMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "IbcReceive to process IBC callbacks",
      "type": "object",
      "required": [
        "ibc_callback"
      ],
      "properties": {
        "ibc_callback": {
          "$ref": "#/definitions/IbcResponseMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Receive endpoint for CW20 / external service integrations",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AnsAsset": {
      "type": "object",
      "required": [
        "amount",
        "name"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "name": {
          "$ref": "#/definitions/AssetEntry"
        }
      }
    },
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "AutocompounderExecuteMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "update_fee_config"
          ],
          "properties": {
            "update_fee_config": {
              "type": "object",
              "properties": {
                "deposit": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "fee_collector_addr": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "performance": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "withdrawal": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Join vault by depositing one or more funds. Requires approval for cw20 tokens",
          "type": "object",
          "required": [
            "deposit"
          ],
          "properties": {
            "deposit": {
              "type": "object",
              "required": [
                "funds"
              ],
              "properties": {
                "funds": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AnsAsset"
                  }
                },
                "max_spread": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "recipient": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Deposit LP tokens. Requires approval for cw20 tokens",
          "type": "object",
          "required": [
            "deposit_lp"
          ],
          "properties": {
            "deposit_lp": {
              "type": "object",
              "required": [
                "lp_token"
              ],
              "properties": {
                "lp_token": {
                  "$ref": "#/definitions/AnsAsset"
                },
                "recipient": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "redeem"
          ],
          "properties": {
            "redeem": {
              "type": "object",
              "required": [
                "amount"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Uint128"
                },
                "recipient": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Withdraw all unbonded funds",
          "type": "object",
          "required": [
            "withdraw"
          ],
          "properties": {
            "withdraw": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Compound all rewards in the vault",
          "type": "object",
          "required": [
            "compound"
          ],
          "properties": {
            "compound": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Unbond in batches",
          "type": "object",
          "required": [
            "batch_unbond"
          ],
          "properties": {
            "batch_unbond": {
              "type": "object",
              "properties": {
                "limit": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "start_after": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_staking_config"
          ],
          "properties": {
            "update_staking_config": {
              "type": "object",
              "properties": {
                "bonding_data": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/BondingData"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "BaseExecuteMsg": {
      "oneOf": [
        {
          "description": "Updates the base config",
          "type": "object",
          "required": [
            "update_config"
          ],
          "properties": {
            "update_config": {
              "type": "object",
              "properties": {
                "ans_host_address": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "version_control_address": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "BondingData": {
      "type": "object",
      "required": [
        "unbonding_period"
      ],
      "properties": {
        "max_claims_per_address": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "unbonding_period": {
          "$ref": "#/definitions/Duration"
        }
      },
      "additionalProperties": false
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Duration": {
      "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "height"
          ],
          "properties": {
            "height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Time in seconds",
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IbcResponseMsg": {
      "description": "IbcResponseMsg should be de/serialized under `IbcCallback()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "id",
        "msg"
      ],
      "properties": {
        "id": {
          "description": "The ID chosen by the caller in the `callback_id`",
          "type": "string"
        },
        "msg": {
          "$ref": "#/definitions/StdAck"
        }
      },
      "additionalProperties": false
    },
    "StdAck": {
      "description": "This is a generic ICS acknowledgement format. Proto defined [here](https://github.com/cosmos/cosmos-sdk/blob/v0.42.0/proto/ibc/core/channel/v1/channel.proto#L141-L147) If ibc_receive_packet returns Err(), then x/wasm runtime will rollback the state and return an error message in this format",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "result"
          ],
          "properties": {
            "result": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "error"
          ],
          "properties": {
            "error": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
