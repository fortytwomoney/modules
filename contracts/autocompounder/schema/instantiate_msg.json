{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "app",
    "base"
  ],
  "properties": {
    "app": {
      "description": "custom instantiate msg attributes",
      "allOf": [
        {
          "$ref": "#/definitions/AutocompounderInstantiateMsg"
        }
      ]
    },
    "base": {
      "description": "base instantiate information",
      "allOf": [
        {
          "$ref": "#/definitions/BaseInstantiateMsg"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AssetEntry": {
      "description": "May key to retrieve information on an asset",
      "type": "string"
    },
    "AutocompounderInstantiateMsg": {
      "description": "Init msg",
      "type": "object",
      "required": [
        "code_id",
        "commission_addr",
        "deposit_fees",
        "dex",
        "performance_fees",
        "pool_assets",
        "withdrawal_fees"
      ],
      "properties": {
        "code_id": {
          "description": "cw20 code id",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "commission_addr": {
          "description": "address that recieves the fee commissions",
          "type": "string"
        },
        "deposit_fees": {
          "$ref": "#/definitions/Uint128"
        },
        "dex": {
          "description": "Name of the target dex",
          "type": "string"
        },
        "performance_fees": {
          "$ref": "#/definitions/Uint128"
        },
        "pool_assets": {
          "description": "Assets in the pool",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetEntry"
          }
        },
        "withdrawal_fees": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    },
    "BaseInstantiateMsg": {
      "description": "Used by Module Factory to instantiate App",
      "type": "object",
      "required": [
        "ans_host_address"
      ],
      "properties": {
        "ans_host_address": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
